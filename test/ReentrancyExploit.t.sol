// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "forge-std/Test.sol";
import "../src/VulnerableContract.sol";
import "../src/attack/Attack.sol";

contract ReentrancyExploitTest is Test {
    VulnerableContract public target;
    Attack public attacker;
    address public user;

    function setUp() public {
        user = address(0x123);
        target = new VulnerableContract();
        vm.deal(user, 10 ether);

        vm.prank(user);
        target.deposit{value: 9 ether}();

        attacker = new Attack(address(target));
        vm.deal(address(attacker), 1 ether);
    }

    function test_Reentrancy() public {
        emit log_named_uint(
            "Contract Balance before attack: ",
            address(target).balance
        );

        vm.prank(address(attacker));
        attacker.attack{value: 1 ether}();

        emit log_named_uint(
            "Contract Balance after attack: ",
            address(target).balance
        );
    }
}
